# -*- coding: utf-8 -*-

# 在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字，所以：
#
# '00\d'可以匹配'007'，但无法匹配'00A'；
#
# '\d\d\d'可以匹配'010'；
#
# '\w\w\d'可以匹配'py3'；
#
# .可以匹配任意字符，所以：
#
# 'py.'可以匹配'pyc'、'pyo'、'py!'等等。
# 要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符：
#
# 来看一个复杂的例子：\d{3}\s+\d{3,8}。
#
# 我们来从左到右解读一下：
#
# \d{3}表示匹配3个数字，例如'010'；
#
# \s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，' '等；
#
# \d{3,8}表示3-8个数字，例如'1234567'。
#
# 综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。
#
# 如果要匹配'010-12345'这样的号码呢？由于'-'是特殊字符，在正则表达式中，要用'\'转义，所以，上面的正则是\d{3}\-\d{3,8}。
#
# 但是，仍然无法匹配'010 - 12345'，因为带有空格。所以我们需要更复杂的匹配方式。
#
# 进阶
#
# 要做更精确地匹配，可以用[]表示范围，比如：
#
# [0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；
#
# [0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；
#
# [a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
#
# [a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。
#
# A|B可以匹配A或B，所以[P|p]ython可以匹配'Python'或者'python'。
#
# ^表示行的开头，^\d表示必须以数字开头。
#
# $表示行的结束，\d$表示必须以数字结束。
#
# 你可能注意到了，py也可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py'了。

import re
def do_match(pattern, string):
    is_match = re.match(pattern, string) != None
    print('{} match {}: {}'.format(string, pattern, is_match))

def test_match():
    #[^\s\._-]表示不是空格, '.', '_', '-'
    pattern_email = r'[^\s\._-][\w\.-]+@(?:[A-Za-z0-9]+\.)+[A-Za-z]+'
    do_match(pattern_email, 'passion_wu@126.yahoo.com')

    pattern_phohe_number = r'^\d{11}$'
    do_match(pattern_phohe_number, '13075638712')

def test_split():
    #拆分字符串用正则表达式来匹配
    l = re.split(r'[\s\,\;]+', 'a,b;; c  d')
    print(l)

    #将非数字的字符串用作拆分串
    l = re.split(r'[^\d]+', '12ab34 ,45;*78$9--10')
    print(l)

    l = re.split(r'[^\w]+', '12ab34 ,45;*78$9--10')
    print(l)

# 除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。
# 用()表示的就是要提取的分组（Group）。比如：
def test_group():
    m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
    print(m.group(0))  #注意到group(0)永远是原始字符串
    print(m.group(1))  #第一个group
    print(m.group(2))  #第二个group

    t = '19:05:30'
    m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)
    if m is not None:
        print(m.groups())

def test_grade():
    print(re.match(r'^(\d+)(0*)$', '102300').groups())
    #Out: ('102300', '')

    #加个?就可以让\d+采用非贪婪匹配
    print(re.match(r'^(\d+?)(0*)$', '102300').groups())
    #Out: ('1023', '00')


# 当我们在Python中使用正则表达式时，re模块内部会干两件事情：
# 编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
# 用编译后的正则表达式去匹配字符串。
# 如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式
def test_compile():
    re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
    print(re_telephone.match('010-12345').groups())
    print(re_telephone.match('010-8086').groups())

def main():
    test_match()
    test_split()
    test_group()
    test_grade()
    test_compile()

if __name__ == '__main__':
    main()